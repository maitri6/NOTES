NGINX DOCKERFILE



FROM nginx:alpine

COPY nginx.conf /etc/nginx/nginx.conf

COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

ENTRYPOINT [ "nginx","-g","daemon off;" ]





NGINX.CONF



events {
  worker_connections  1024;  ## Default: 1024
}

http{
    upstream frontend {
        server angular:80;
    }
    upstream backend {
        server node:3003;
    }

    server{
        listen 80;
        server_name frontend;
        server_name backend;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $http_host;

        }

        location /api {
            proxy_pass http://backend;
            rewrite ^/api/?(.*) /$1 break;
            proxy_set_header Host $http_host;

        }
    }
    
}







ANGULAR DOCKERFILE




# Step 1
FROM node:alpine as build-step

# setting workig directory
WORKDIR /app

# copying all files from current directory to working directory
COPY . .

# install node modules and build assets
RUN npm  i && npm run build 

# Step 2
FROM nginx:alpine

# set working directory for nginx asset directory
WORKDIR /usr/share/nginx/html

# remove all default nginx static assets
RUN rm -rf ./*

# copy static assets from build-step
COPY --from=build-step  /app/dist/doctor-patient-frontend .

RUN chown nginx:nginx /usr/share/nginx/html/*

# containers run nginx with global directives and deamon off
ENTRYPOINT [ "nginx","-g","daemon off;" ]






NODE DOCKERFILE






FROM node:14-alpine as build-step
WORKDIR /app
COPY package.json /app
RUN npm install
COPY . /app
EXPOSE 3003
CMD [ "node","app.js" ]






DOCKERCOMPOSE FILE





version: '3'
services:


   #MongoDB services

   mongo-db:
      container_name: database
      image: mongo
      restart: always
      ports:
         - '27017:27017'

  # angular

   angular:
      container_name: angular_app
      build: 
         context: ./doctor-patient-frontend
         dockerfile: Dockerfile
      ports:
         - 4200:80
      depends_on:
         - node
         - mongo-db
      links:
         - node      

        



   # Node API service


   node:
      container_name: node_server
      build: 
         context: ./doctor-patient-backend
         dockerfile: Dockerfile
      ports: 
         - 3003:3003
      environment:
      
         PORT: 3003
         MONGODB_URI: mongodb://mongo-db:27017
         DB_NAME : node
      depends_on:
         - mongo-db
      links:
         - mongo-db 
      volumes:
       
         - ./mongo:/home/mongodb
         - ./mongo/init-db.d/:/docker-entrypoint-initdb.d/
         - ./mongo/db:/data/db  
   

  # NGINX 

   nginx:
      container_name: nginx
      build: 
         context: ./nginx
         dockerfile: Dockerfile
      restart: always
      ports:
         - "80:80"
      links:
         - angular
         - node   


   

volumes:
   mongo-db: {}
   
   
   
   
   
   
   
   
   
   APP COMPONENT.TS
   
   
   
   
import { Component,OnInit } from '@angular/core';
//import { environment } from 'src/environments/environment';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  title = 'doctor-patient-frontend';
  async ngOnInit() {
    var res=await fetch('http://localhost:3003/api/v1/').then(r=>r.json());
    console.log(res);
    
  }
}






NGINX. CONF



events {
  worker_connections  1024;  ## Default: 1024
}

http{
    upstream frontend {
        server angular1:80;
    }
    upstream backend {
        server node1:3002;
    }

    server{
        listen 80;
        server_name frontend;
        server_name backend;

       
        

        location / {
            #proxy_pass http://frontend;
            #proxy_set_header Host $http_host;
            #index index.html;
            root C:\Users\user\Desktop\DOCKER\PROJECT\doctor-patient-frontend\dist;
            index index.html index.htm;

            try_files $uri $uri/ /index.html;
            #index index.html index.htm;
            #include /etc/nginx/mime.types;

        }

        location /api {
            proxy_pass http://backend/api;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            rewrite ^/api/?(.*) /$1 break;
            proxy_set_header Host $http_host;

        }
    }
    
}











FRONTEND






FROM node:alpine

WORKDIR /app

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json ./

# Install any needed packages
RUN npm i

# Bundle app source
COPY . .

EXPOSE 4200

CMD [ "npm", "start" ]







BACKEND





FROM node:14-alpine

WORKDIR /app

COPY package*.json  ./

RUN npm install

RUN npm rebuild bcrypt --build-from-source

COPY . .


EXPOSE 3002

CMD ["npm","start"]




npm install node-pre-gyp -g




version: '3'
services:
   mongo-db:
      image: mongo
      ports: 
         - 27017:27017
      restart: always   
   client:
      container_name: angular_app
      build: 
         context: ./doctor-patient-frontend
         dockerfile: Dockerfile
      ports:
         - 4200:80
      depends_on:
         - backend-service
         - mongo-db
      links:
         - backend-service      
   
   backend-service:
       container_name: node_server
       build: 
         context: ./doctor-patient-backend
         dockerfile: Dockerfile
       ports: 
         - 3003:3003
       environment:
         MONGODB_URI: mongodb://mongo-db:27017
         DB_NAME : node
       
       links:
         - mongo-db 
       depends_on:
         - mongo-db 
       volumes:
       
        
         - "/data/db:/data/db"  
